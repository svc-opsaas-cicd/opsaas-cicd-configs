version: 2

aliases:
  - &check-build-components
    name: Check build components
    command: |
      pip install -r .circleci/requirements.txt
      git --no-pager diff --name-only origin/main... | .circleci/find-build-components.py --build_components .circleci/build-components.yaml > ~/project/build-components.txt
      cat ~/project/build-components.txt
      export CIRCLECI_BUILD_COMPONENTS="$(cat ~/project/build-components.txt)"
      echo $CIRCLECI_BUILD_COMPONENTS
      echo "export CIRCLECI_BUILD_COMPONENTS=$CIRCLECI_BUILD_COMPONENTS" >> $BASH_ENV

  - &setup-toolkits
    name: Setup Build Environment Variables
    command: |
      echo "export GIT_SHA=${CIRCLE_SHA1:0:7}" >> $BASH_ENV
      export GIT_COMMIT_USER=$(git show -s --format='%an' $CIRCLE_SHA1)
      echo "export GIT_COMMIT_USER=$GIT_COMMIT_USER" >> $BASH_ENV
      echo "export IMAGE_TAG=$CIRCLE_BRANCH-${CIRCLE_SHA1:0:7}" >> $BASH_ENV

      # Shows toolkits version
      docker -v
      java -version
      go version
      cat $BASH_ENV

  - &build-components
    name: Build components
    command: |
      sudo apt install protobuf-compiler
      go get -u github.com/golang/protobuf/{proto,protoc-gen-go}
      cd $CIRCLE_WORKING_DIRECTORY/services/common/protos
      echo "Running proto generator .."
      ./gen_proto.sh

      IFS=',' read -r -a components <<< "$CIRCLECI_BUILD_COMPONENTS"
      for comp in "${components[@]}"
      do
        echo "Building component: $comp"
        cd $CIRCLE_WORKING_DIRECTORY/services
      done

  - &build-container-image
    name: Build container image
    command: |
      # Docker login ECR
      aws ecr get-login-password --region $COMM_ECR_REGION | docker login --username AWS --password-stdin $COMM_ECR_REG

      echo $IMAGE_TAG
      docker build -t $COMM_ECR_REG/$CIRCLE_PROJECT_REPONAME:$IMAGE_TAG --build-arg base_image=$COMM_ECR_REG/$COMM_BASE .
      docker images

  - &push-image-to-ecr
    name: Push image to ECR
    command: |
      # Docker push
      docker push $COMM_ECR_REG/$CIRCLE_PROJECT_REPONAME:$IMAGE_TAG

  - &update-deployment-config
    name: Update deployment config
    command: |
      # Change deployment config
      cd ~/
      git config --global user.email "jacky.chu@nutanix.com"
      git config --global user.name "jacky-chu-nutanix"
      git clone https://jacky-chu-nutanix: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@github.com/nutanix-beam/cpaas-k8s-opsaas-gitops.git
      cd ~/cpaas-k8s-opsaas-gitops
      git checkout -b k8s-onboard origin/k8s-onboard
      cd products-non-clutch/opsaas/manifests/$TEST_ENV
      kubectl patch --local -f opsaas-ingestion-service-deployment.yaml \
        -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"opsaas-ingestion-service\",\"image\":\"$COMM_ECR_REG/$CIRCLE_PROJECT_REPONAME:$IMAGE_TAG\"}]}}}}" \
        -o yaml > deployment.yaml.tmp
      cat deployment.yaml.tmp
      mv deployment.yaml.tmp opsaas-ingestion-service-deployment.yaml

      git add . && git commit -m "Update app opsaas-ingestion-service-$TEST_ENV to
      $COMM_ECR_REG/$CIRCLE_PROJECT_REPONAME:$IMAGE_TAG
      PR: $CIRCLE_PULL_REQUEST
      Commit : $CIRCLE_PULL_REQUEST/commits/$CIRCLE_SHA1"

      git push

  - &sync-app
    name: Sync Argocd app
    command: |
      # Argocd login
      argocd login $ARGOCD_SERVER --username opsaas --password $ARGO_PWD --insecure

      # Sync
      argocd app sync opsaas-$TEST_ENV-app --prune --timeout 600 || true

      # Waiting for health
      argocd app wait opsaas-$TEST_ENV-app --health --sync  --timeout 600

commands:
  save-cache:
    steps:
      - run:
          name: Download go modules dependencies
          command: |
            go mod vendor

      - save_cache:
          paths:
            - ~/project/vendor
          key: dependencies-{{ checksum "go.mod" }}

  update-deployment-config:
    parameters:
      test_env:
        description: Test env (dev1, qa1)
        type: string
    steps:
      - run:
          name: Update deployment config
          command: |
            # Change deployment config
            cd ~/
            git config --global user.email "jacky.chu@nutanix.com"
            git config --global user.name "jacky-chu-nutanix"
            git clone https://jacky-chu-nutanix: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@github.com/nutanix-beam/cpaas-k8s-oneops-gitops.git
            cd ~/cpaas-k8s-oneops-gitops
            git checkout -b k8s-onboard origin/k8s-onboard
            cd products-non-clutch/oneops/manifests/<< parameters.test_env >>
            kubectl patch --local -f deployment.yaml \
              -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"$CIRCLE_PROJECT_REPONAME\",\"image\":\"$COMM_ECR_REG/$CIRCLE_PROJECT_REPONAME:$IMAGE_TAG\"}]}}}}" \
              -o yaml > deployment.yml.tmp
            cat deployment.yml.tmp
            mv deployment.yml.tmp $CIRCLE_PROJECT_REPONAME-deployment.yml

            # git add . && git commit -m "Update app $CIRCLE_PROJECT_REPONAME-<< parameters.test_env >> to
            # $COMM_ECR_REG/$CIRCLE_PROJECT_REPONAME:$IMAGE_TAG
            # PR: $CIRCLE_PULL_REQUEST
            # Commit : $CIRCLE_PULL_REQUEST/commits/$CIRCLE_SHA1"

            # git push

  sync-app:
    parameters:
      test_env:
        description: Test env (dev1, qa1)
        type: string
    steps:
      - run:
        name: Sync Argocd app
        command: |
          # Argocd login
          argocd login $ARGOCD_SERVER --username admin --password $ARGO_PWD --insecure

          # Sync
          argocd app sync opsaas-<< parameters.test_env >>-app --prune --timeout 600 || true

          # Waiting for health
          argocd app wait opsaas-<< parameters.test_env >>-app --health --sync  --timeout 600

jobs:
  pr-workflow-jobs:
    docker:
      - image: 981042990700.dkr.ecr.us-west-2.amazonaws.com/oneops-xplay-common-service:tools.latest

    steps:
      - checkout

      - run:
          name: Code Quality Analysis
          command: |
            /tools/sonar-scanner-$SONAR_SCANNER_VERSION/bin/sonar-scanner -D"sonar.host.url=$SONARQUBE_HOST" \
              -D"sonar.login=$SONARQUBE_TOKEN" \
              -D"sonar.projectKey=$SONARQUBE_PROJECT_KEY" \
              -D"sonar.branch.name=$CIRCLE_BRANCH" \
              -D"sonar.exclusions=**/.idea/**/*,**/test/**/*,**/target/**/*,**/services/common/external/**/*,**/services/common/old/**/*,**/services/execution_engine/actions.old/**/*,**/services/controller-old/**/*,**/*_test.go,**/tools/**/*,**/*/settings.xml,**/api/playbooks/**/*" \
              -D"project.settings=" \
              -D"sonar.qualitygate.wait=true" \
              -D"sonar.c.file.suffixes=-" \
              -D"sonar.cpp.file.suffixes=-" \
              -D"sonar.objc.file.suffixes=-" || true

            if [ ! -z "$CIRCLE_PULL_REQUEST" ]
            then
              IFS='/' read -r -a PR <<< $CIRCLE_PULL_REQUEST
              Code_Coverage=$(curl -ks -u $SONARQUBE_TOKEN: "$SONARQUBE_HOST/api/measures/search_history?component=$SONARQUBE_PROJECT_KEY&branch=$CIRCLE_BRANCH&metrics=coverage" | jq -r ".measures[0].history[-1].value")
              java -jar /tools/opsaas-cicd-commands.jar github pr comment add -r=nutanix-beam/$CIRCLE_PROJECT_REPONAME -p=${PR[-1]} -c="Code quality check status: $SONARQUBE_HOST/dashboard?id=$SONARQUBE_PROJECT_KEY&branch=$CIRCLE_BRANCH"
              java -jar /tools/opsaas-cicd-commands.jar github pr comment add -r=nutanix-beam/$CIRCLE_PROJECT_REPONAME -p=${PR[-1]} -c="Test coverage rate: $Code_Coverage %"
            fi

      - run:
          name: Unit Test
          command: |
            mkdir -p test-results
            # cd sgotestsum --format pkgname --junitfile test-results/unit-tests.xml -- -coverprofile=test-results/cover.out ./...

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  dev-integration-workflow-jobs:
    machine: true
    steps:
      - checkout

      - run: *setup-toolkits

      - run:
          name: Build compo
          command: |
            go build -o main

      - store_artifacts:
          path: main

      - run: *build-container-image

      # - run: *push-image-to-ecr

      # - run:
      #     name: Setup test bed
      #     command: |
      #       export TEST_ENV=dev1
      #       echo "export TEST_ENV=dev1" >> $BASH_ENV

      # - run: *update-deployment-config

      # - run: *sync-app

  qa-staging-workflow-jobs:
    machine: true
    steps:
      - checkout

      - run: *setup-toolkits

      - run:
          name: Build package
          command: |
            go build -o main

      - store_artifacts:
          path: main

      - run: *build-container-image

      - run: *push-image-to-ecr

      - run:
          name: Setup test bed
          command: |
            export TEST_ENV=qa1
            echo "export TEST_ENV=qa1" >> $BASH_ENV

      - run: *update-deployment-config

      - run: *sync-app

  calibrate-workflow-jobs:
    machine: true
    steps:
      - run:
          name: Update dev branch and test environment
          command: |
            echo "Update dev branch and test environment"
      - run:
          name: Update qa branch and test environment
          command: |
            echo "Update qa branch and test environment"

  api-doc-publish-jobs:
    docker:
      - image: cimg/python:3.8.5
    resource_class: small
    environment:
        CANAVERAL_DEPS: jq
        CANAVERAL_BUILD_SYSTEM: noop
        CANAVERAL_PACKAGE_TOOLS: docker
        DOCKER_REPO_SERVER: artifactory.dyn.ntnxdpro.com/canaveral-legacy-docker
        CANAVERAL_LANGUAGE_VERSION: 3.8.5
        CANAVERAL_USE_LEGACY_PIPELINE_MODE: "0"
        CANAVERAL_USE_BLUEPRINT_PROXY: "1"

    steps:
      - checkout
      - run: 
          name: Check build components
          command: |
            pip install -r .circleci/requirements.txt
            git --no-pager diff --name-only HEAD^ HEAD | .circleci/find-build-components.py --build_components .circleci/build-components.yaml > ~/project/build-components.txt
            cat ~/project/build-components.txt
            export CIRCLECI_BUILD_COMPONENTS="$(cat ~/project/build-components.txt)"
            echo "export CIRCLECI_BUILD_COMPONENTS=$CIRCLECI_BUILD_COMPONENTS" >> $BASH_ENV
      - run:
          name: Check does api code has changed
          command: |-
            echo $CIRCLECI_BUILD_COMPONENTS
            if [[ "$CIRCLECI_BUILD_COMPONENTS" != *"api-doc"* ]]; then
              echo "No api code change"
              exit 1
            fi
      - run:
            name: Interpolated Environment Variables
            command: |-
                echo "export DOCKER_REPO_NAME=${CIRCLE_PROJECT_USERNAME}" >> $BASH_ENV
                echo "export IMAGE_NAME=${DOCKER_REPO_SERVER}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}" >> $BASH_ENV
      - run:
            name: Install Dependencies
            command: |-
                sudo apt-get update
                sudo apt-get install -y --no-install-recommends ${CANAVERAL_DEPS}
      - run:
            name: Bootstrap Canaveral Certs
            command: |-
                declare -x CANAVERAL_CERT_DOWNLOAD_URL="${CANAVERAL_CERT_DOWNLOAD_URL:-http://canaveral-engine-api.canaveral-corp.us-west-2.aws/ca}"
                sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/root-ca.crt" -O "/usr/local/share/ca-certificates/canaveral-root-ca.crt"
                sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/intermediate-ca.crt" -O "/usr/local/share/ca-certificates/canaveral-intermediate-ca.crt"
                # A bug in OpenSSL can cause trouble with certificate verification (for example, when downloading
                # golang packages)  Uncomment the next line as a workaround.
                # sudo rm /usr/share/ca-certificates/mozilla/DST_Root_CA_X3.crt
                sudo /usr/sbin/update-ca-certificates
                sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/ca-chain.crt" -O "/tmp/ca-chain.crt"
                cat "/tmp/ca-chain.crt" >> $(python -m certifi)
      - run:
            name: Install canaveral-build-tools
            command: |-
                BUILD_TOOLS_VERSION=$(curl -s -L https://canaveral-gatekeeper.canaveral-corp.us-west-2.aws/build_config/build_tools_version | jq -r '.result')
                echo "Using build tools version '${BUILD_TOOLS_VERSION}'"
                pyenv virtualenv canaveral_build
                PYENV_VERSION=canaveral_build pip install --upgrade pip
                PYENV_VERSION=canaveral_build pip install --extra-index-url "https://${CANAVERAL_ARTIFACTORY_READ_USER}:${CANAVERAL_ARTIFACTORY_READ_PASSWORD}@artifactory.dyn.ntnxdpro.com/artifactory/api/pypi/canaveral-legacy-pypi/simple" --trusted-host artifactory.dyn.ntnxdpro.com nutanix-release-engineering-canaveral-build-tools=="${BUILD_TOOLS_VERSION}"
      - run:
            name: Finalize Canaveral Cert Install
            command: |-
                mkdir -p "/tmp/ssl-certs/tmp"
                sudo -E $(pyenv which python) -m canaveral_build_tools.core.setup_ca_chain
                sudo chown -R circleci:circleci /tmp/canaveral_logs
            environment:
                PYENV_VERSION: canaveral_build
      - run:
            name: canaveral/core/scripts/create-workspace.sh
            command: |-
                CANAVERAL_TOKEN_VENDING_MACHINE_NONCE=$(head /dev/urandom | env LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
                echo "export CANAVERAL_TOKEN_VENDING_MACHINE_NONCE=${CANAVERAL_TOKEN_VENDING_MACHINE_NONCE}" >> $BASH_ENV
                echo "NONCE: ${CANAVERAL_TOKEN_VENDING_MACHINE_NONCE}"
            environment:
                PYENV_VERSION: canaveral_build
      - run:
            name: Setup Build
            command: |-
                python -m canaveral_build_tools.core.setup_environment
                python -m canaveral_build_tools.core.post_checkout
                python -m canaveral_build_tools.core.dependency_setup
                python -m canaveral_build_tools.core.setup_database
            environment:
                PYENV_VERSION: canaveral_build
      - run:
          name: Build API doc
          command: |-
            sudo apt-get install openjdk-11-jdk maven
            export MAVEN_OPTS=-Xss5M
            cd ~/project/api/playbooks
            git config --global url."https://${GIT_TOKEN}@github.com/nutanix-core".insteadOf "https://github.com/nutanix-core"
            mvn clean package -s ../settings.xml -U -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true 
            ls -l playbooks-api-definitions/target/generated-api-artifacts
      - run:
          name: Publish API doc
          command: |-
            cd ~/
            git clone git@github.com:nutanix-core/ntnx-api-release-engineering.git
            source /home/circleci/project/.workspace/.canaveralrc
            python ntnx-api-release-engineering/py/publish_doc.py --registry http://10.41.28.200:8045 --yaml ~/project/api/playbooks/playbooks-api-definitions/target/generated-api-artifacts/swagger-aiops-*-all.yaml
          environment:
                PYENV_VERSION: canaveral_build

  release-workflow-jobs:
    machine: true
    steps:
      - run:
          name: Build
          command: |
            echo "build"
      - run:
          name: Patch Pre-release env
          command: |
            echo "patch"
 
workflows:
  version: 2

  pr-workflow:
    jobs:
      - pr-workflow-jobs:
          filters:
            branches:
              ignore:
                - main
                - master

  calibrate-workflow:
    jobs:
      - calibrate-workflow-jobs:
          filters:
            branches:
              only:
                - main
                - master

  api-doc-publish-workflow:
    jobs:
      - api-doc-publish-jobs:
          filters:
            branches:
              only:
                - main
                - master
